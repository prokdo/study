<?xml version="1.0"?>
<doc>
<assembly>
<name>
LAB5
</name>
</assembly>
<members>
<member name="T:LAB5.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:LAB5.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:LAB5.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:LAB5.Viterbi.Decoder">
 <summary>
 Декодер свёрточного кода по алгоритму Витерби.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Decoder.#ctor(System.Int32[],System.Int32)">
 <summary>
 Конструктор с указанием порождающих многочленов.
 </summary>
 <param name="polynoms">Массив порождающих многочленов (по умолчанию в ВОСЬМЕРИЧНОЙ системе счисления).</param>
 <param name="base">Основание системы счисления, в которой указаны полиномы. Обычно 8 или 10.</param>
</member>
<member name="M:LAB5.Viterbi.Decoder.Decode(System.Collections.Generic.IEnumerable{System.Boolean})">
 <summary>
 Декодирует битовый поток <paramref name="encodedMessage"/>.
 </summary>
 <param name="encodedMessage"></param>
</member>
<member name="M:LAB5.Viterbi.Decoder.Decode(System.Collections.BitArray)">
 <summary>
 Декодирует битовый поток <paramref name="encodedMessage"/>.
 </summary>
 <param name="encodedMessage"></param>
</member>
<member name="M:LAB5.Viterbi.Decoder.Decode(System.String)">
 <summary>
 Декодирует закодированную строку, состоящую из "1" и "0".
 </summary>
 <param name="binaryString">Строка из битов "1" и "0".</param>
</member>
<member name="M:LAB5.Viterbi.Decoder.Decode(System.IO.TextReader,System.IO.BinaryWriter)">
 <summary>
 Декодирует битовый поток, прочитанный из текстового файла битового потока.
 </summary>
 <param name="streamToDecode"></param>
 <param name="decodedOutputStream"></param>
</member>
<member name="M:LAB5.Viterbi.Decoder.UpdatePaths(System.Boolean[],LAB5.Viterbi.Decoder.PathHolder@)">
 <summary>
 Находит очередные выжившие пути декодера, отбрасывает невыжившие.
 </summary>
 <param name="encoderOut">Очередной символ закодированного сообщения на выходе кодера.</param>
 <param name="paths">Вычислитель и селектор путей декодера. Обновляемое значение.</param>
</member>
<member name="M:LAB5.Viterbi.Decoder.CalculatePathMetrics(System.Boolean[],LAB5.Viterbi.Decoder.PathHolder)">
 <summary>
 Рассчитывает метрики для всех путей.
 </summary>
 <param name="encoderOut">Очередной символ закодированного сообщения на выходе кодера.</param>
 <param name="paths">Вычислитель и селектор путей декодера.</param>
</member>
<member name="M:LAB5.Viterbi.Decoder.SelectSurvivedPaths(LAB5.Viterbi.Transition[])">
 <summary>
 Выбирает и возвращает выжившие пути.
 </summary>
 <remarks>
 Выбирает из 2-х конкурирующих путей, входящих в один узел, путь с минимальной метрикой.
 Также здесь можно просмотреть невыживший путь, если это для чего-то нужно.
 </remarks>
</member>
<member name="M:LAB5.Viterbi.Decoder.CalculateHammingDistance(System.Collections.Generic.IEnumerable{System.Boolean}[])">
 <summary>
 Рассчитывает Хэмингово расстояние между несколькими битовыми комбинациями.
 </summary>
 <param name="bitCombination">Набор битовых комбинаций. Например, {0,1} и {1,1}. Разрядности комбинаций должны быть одинаковыми.</param>
 <remarks>
 Хэмингово расстояние рассчитывается следующим образом: 
 битовые комбинации складывюется (ПОРАЗРЯДНО) по модулю два и далее рассчитывается количество единиц в получившемся значении. 
 Например, хэмингово расстояние для двух комбинаций 01 и 00 рассчитывается следующим образом: 
 количество единиц (0 xor 0; 1 xor 0) = количество единиц (0;1) = 1.
 </remarks>
</member>
<member name="T:LAB5.Viterbi.Decoder.PathHolder">
 <summary>
 Содержит полный набор выживших и невыживших путей декодера.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Decoder.PathHolder.#ctor(System.Int32)">
 <summary>
 Создаёт объект для хранения путей при декодировании.
 </summary>
 <param name="decoderStatesCount">Число состояний декодера. Число выживших и невыживших путей будет в 2 раза меньше.</param>
</member>
<member name="P:LAB5.Viterbi.Decoder.PathHolder.Paths">
 <summary>
 Массив путей декодера.
 </summary>
</member>
<member name="F:LAB5.Viterbi.Decoder.PathHolder.IsFirstNode">
 <summary>
 Путь уже имеет узлы или ещё нет (флаги для выжившей и невыжевшей ветвей).
 </summary>
</member>
<member name="M:LAB5.Viterbi.Decoder.PathHolder.ChooseFinalMessage">
 <summary>
 Восстанавливает сообщение, выбирая его из финальных выживших путей кодера.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Decoder.PathHolder.AddSurvivorPath(LAB5.Viterbi.Transition[]@)">
 <summary>
 Добавляет выживший путь в <see cref="P:LAB5.Viterbi.Decoder.PathHolder.Paths"/>.
 </summary>
 <param name="survivors">Массив выживших переходов.</param>
</member>
<member name="M:LAB5.Viterbi.Decoder.PathHolder.AddSurvivorPathFirstly(LAB5.Viterbi.Transition[]@)">
 <summary>
 Первые узлы добавляем без привязки к предыдущим.
 </summary>
 <param name="survivors"></param>
</member>
<member name="M:LAB5.Viterbi.Decoder.PathHolder.GetPathMetricByNode(System.Int32)">
 <summary>
 Возвращает метрику пути по узлу назначения.
 </summary>
 <param name="node">Узел назначения, для пути которого нужна метрика.</param>
</member>
<member name="T:LAB5.Viterbi.Decoder.DecoderPath">
 <summary>
 Полный путь декодирования.
 </summary>
</member>
<member name="P:LAB5.Viterbi.Decoder.DecoderPath.SurvivorPath">
 <summary>
 Список выживших переходов при декодировании.
 </summary>
</member>
<member name="P:LAB5.Viterbi.Decoder.DecoderPath.Metrics">
 <summary>
 Метрика последнего перехода всего выжившего пути.
 </summary>
</member>
<member name="P:LAB5.Viterbi.Decoder.DecoderPath.DestinationNode">
 <summary>
 Узел назначения последнего перехода всего выжившего пути.
 </summary>
</member>
<member name="P:LAB5.Viterbi.Decoder.DecoderPath.Count">
 <summary>
 Число узлов в выжившем пути.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Decoder.DecoderPath.AddSurvivorNode(LAB5.Viterbi.Transition)">
 <summary>
 Добавляет узел к выжившему пути.
 </summary>
 <param name="node"></param>
</member>
<member name="M:LAB5.Viterbi.Decoder.DecoderPath.ToString">
 <summary>
 Возвращает список переходов. В конце - метрика пути.
 </summary>
</member>
<member name="T:LAB5.Viterbi.Encoder">
 <summary>
 Кодер свёрточного кода.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Encoder.#ctor(System.Int32[],System.Int32)">
 <summary>
 Конструктор кодера свёрточного кода с указанием порождающих многочленов.
 </summary>
 <param name="polynoms">Массив порождающих многочленов (по умолчанию в ВОСЬМЕРИЧНОЙ системе счисления).</param>
 <param name="base">Основание системы счисления, в которой указаны полиномы. Обычно 8 или 10.</param>
</member>
<member name="M:LAB5.Viterbi.Encoder.Encode(System.Collections.BitArray)">
 <summary>
 Кодирует сообщение <paramref name="message"/>, заданное массивом битов.
 </summary>
 <remarks>
 Пользуясь решёткой, легко проводить кодирование, не высчитывая каждый раз суммы по модулю два. 
 Для этого нужно взять за исходное состояние узел 000 и далее перемещаться по стрелкам в один из двух узлов. 
 Выбор следующего узла определяется кодируемым битом данных: если бит данных «1», то первый слева бит следующего узла должен быть «1», 
 если кодируемый бит «0», то первый слева бит следующего узла должен быть «0». 
 Физически операция перемещения по стрелке соответствует сдвигу в регистре кодера. 
 Выходным значением кодера будут цифры, соответствующие стрелке.
 </remarks>
</member>
<member name="M:LAB5.Viterbi.Encoder.Encode(System.String)">
 <summary>
 Кодирует сообщение, заданное строкой символов.
 </summary>
 <param name="message">Сообщение в виде текстовой строки.</param>
 <remarks>Для преобразования в байты применяется кодировка UTF8.</remarks>
</member>
<member name="M:LAB5.Viterbi.Encoder.Encode(System.IO.BinaryReader,System.IO.StreamWriter)">
 <summary>
 Кодирует поток <paramref name="streamToEncode"/> и сохраняет в поток <paramref name="encodedOutputStream"/>.
 </summary>
 <param name="streamToEncode">Двоичный поток, который будет побайтово прочитан и закодирован по алгоритму Витерби.</param>
 <param name="encodedOutputStream">В этот поток (в текстовом!) виде будет сохранён результат.</param>
</member>
<member name="M:LAB5.Viterbi.Encoder.Encode(System.Collections.Generic.IEnumerable{System.Boolean})">
 <summary>
 Кодирует сообщение <paramref name="message"/>, заданное массивом битов.
 </summary>
</member>
<member name="T:LAB5.Viterbi.ViterbiBase">
 <summary>
 Базовый класс для кодера и декодера.
 </summary>
 
</member>
<member name="M:LAB5.Viterbi.ViterbiBase.#ctor(System.Int32[],System.Int32)">
 <summary>
 Конструктор с указанием порождающих многочленов.
 </summary>
 <param name="polynoms">Массив порождающих многочленов (по умолчанию в ВОСЬМЕРИЧНОЙ системе счисления).</param>
 <param name="base">Основание системы счисления, в которой указаны полиномы. Обычно 8 или 10.</param>
</member>
<member name="P:LAB5.Viterbi.ViterbiBase.Polynoms">
 <summary>
 Массив порождающих многочленов.
 </summary>
</member>
<member name="P:LAB5.Viterbi.ViterbiBase.CoderBitness">
 <summary>
 Разрядность кодера.
 </summary>
 <remarks>Соответствует числу полиномов.</remarks>
</member>
<member name="P:LAB5.Viterbi.ViterbiBase.RegisterLength">
 <summary>
 Разрядность сдвигового регистра кодера.
 </summary>
</member>
<member name="P:LAB5.Viterbi.ViterbiBase.CoderStates">
 <summary>
 Таблица возможных состояний кодера.
 </summary>
</member>
<member name="P:LAB5.Viterbi.ViterbiBase.Transitions">
 <summary>
 Таблица переходов кодера.
 </summary>
 <remarks>
 Пользуясь решёткой, легко проводить кодирование, не высчитывая каждый раз суммы по модулю два. 
 Для этого нужно взять за исходное состояние узел 000 и далее перемещаться по стрелкам в один из двух узлов. 
 Выбор следующего узла определяется кодируемым битом данных – если бит данных «1», то первый слева бит следующего узла должен быть «1», 
 если кодируемый бит – «0», то первый слева бит следующего узла должен быть «0». 
 Физически переход соответствует сдвигу в регистре кодера. 
 Выходным значением кодера будет (<see cref="F:LAB5.Viterbi.Transition.CoderOut"/>).
 </remarks>
</member>
<member name="P:LAB5.Viterbi.ViterbiBase.StatesCount">
 <summary>
 Число возможных состояний регистра.
 </summary>
 <remarks>Всего 2^k ветвей (число заваисит только от длины регистра).</remarks>
</member>
<member name="P:LAB5.Viterbi.ViterbiBase.TransitionsCount">
 <summary>
 Число возможных переходов из узла в узел / число узлов в решётке переходов
 </summary>
 <remarks>Всего 2^(k-1) переходов (число заваисит только от длины регистра).</remarks>
</member>
<member name="M:LAB5.Viterbi.ViterbiBase.ToString">
 <summary>
 Возвращает список образующих многочленов в восьмеричной форме.
 </summary>
</member>
<member name="M:LAB5.Viterbi.ViterbiBase.CalculateCoderStates">
 <summary>
 Рассчитывает таблицу всех возможных состояний кодера.
 </summary>
 <remarks>Значение состояния определяется по его индексу.</remarks>
</member>
<member name="M:LAB5.Viterbi.ViterbiBase.CalculateTransitionsGrid">
 <summary>
 Рассчитывает решётку переходов.
 </summary>
</member>
<member name="M:LAB5.Viterbi.ViterbiBase.GetNextTransition(System.Boolean,System.Collections.Generic.IEnumerable{LAB5.Viterbi.Transition})">
 <summary>
 Выбирает узел решётки, в который нужно идти при кодировании бита <paramref name="bitToEncode"/>.
 </summary>
 <param name="bitToEncode">Очередной кодируемый бит сообщения.</param>
 <param name="currentTransitions">Массив возможных переходов из текущего узла.</param>
</member>
<member name="T:LAB5.Viterbi.Transition">
 <summary>
 Параметры перехода кодера.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Transition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 
 </summary>
 <param name="registerBitness">Разрядность регистра.</param>
 <param name="coderBitness">Разрядность кодера. Совпадает с числом порождающих многочленов кодера.</param>
 <param name="srcNode">Исходящий узел.</param>
 <param name="destNode">Входящий узел.</param>
 <param name="coderOut">Значение на выходе кодера.</param>
</member>
<member name="P:LAB5.Viterbi.Transition.SourceNode">
 <summary>
 Значение узла, из которого осуществляется переход.
 </summary>
</member>
<member name="P:LAB5.Viterbi.Transition.DestinationNode">
 <summary>
 Значение узла, в который возможен переход.
 </summary>
</member>
<member name="P:LAB5.Viterbi.Transition.CoderOutBits">
 <summary>
 Выход кодера в виде битов.
 </summary>
</member>
<member name="P:LAB5.Viterbi.Transition.DestinationNodeMsb">
 <summary>
 Старший бит узла назначения.
 </summary>
 <remarks>Используется при принятии решения о переходе.</remarks>
</member>
<member name="P:LAB5.Viterbi.Transition.Metrics">
 <summary>
 Метрика пути.
 </summary>
 <remarks>Используется декодером.</remarks>
</member>
<member name="F:LAB5.Viterbi.Transition.CoderBitness">
 <summary>
 Разрядность кодера. Соответствует числу образующих многочленов.
 </summary>
</member>
<member name="F:LAB5.Viterbi.Transition.RegisterBitness">
 <summary>
 Разрядность регистра.
 </summary>
</member>
<member name="F:LAB5.Viterbi.Transition.CoderOut">
 <summary>
 Значение на выходе кодера на данном переходе.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Transition.Clone">
 <summary>
 Клонирует переход.
 </summary>
</member>
<member name="T:LAB5.Viterbi.Helpers">
 <summary>
 Вспомогательные методы.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Helpers.ToBinary(System.Int32)">
 <summary>
 Преобразует число из десятичной системы счисления в число в двоичной системе счисления.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Helpers.ToOctal(System.Int32)">
 <summary>
 Преобразует число из десятичной системы счисления в число в восьмеричной системе счисления.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Helpers.ToDecimal(System.Int32)">
 <summary>
 Преобразует число из восьмеричной системы счисления в число в десятичной системе счисления.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Helpers.ConvertFromTo(System.Int32,System.Int32,System.Int32,System.Int32@)">
 <summary>
 Преобразует число из одной системы счисления в другую.
 </summary>
 <param name="number">Число в исходной системе счисления.</param>
 <param name="fromBase">Исходная система счисления.</param>
 <param name="toBase">Целевая система счисления.</param>
 <param name="bitness">Выходное значение - разрядность в целевой системе счисления. Если не требуется, можно не передавать.</param>
 <remarks>
 Будьте внимательны: при переводе в двоичную систему может возникнуть ошибка переполнения, т.к. двоичные числа очень длинные.
 Перевод в 16-ную систему и обратно не обрабатывается.
 </remarks>
</member>
<member name="M:LAB5.Viterbi.Helpers.ToBinString(System.String)">
 <summary>
 Возвращает строку, представляющую двоичную последовательность переданной строки.
 </summary>
 <param name="s">Произвольная строка.</param>
</member>
<member name="M:LAB5.Viterbi.Helpers.ToBinString(System.Collections.Generic.IEnumerable{System.Boolean})">
 <summary>
 Возвращает строку, представляющую двоичную последовательность переданного массива битов.
 </summary>
 <param name="bits">Произвольная битовая последовательность.</param>
</member>
<member name="M:LAB5.Viterbi.Helpers.FromBinString(System.String)">
 <summary>
 Преобразует строку битов в битовую последовательность.
 </summary>
 <param name="binaryString">Строка, составленная из "1" и "0".</param>
</member>
<member name="M:LAB5.Viterbi.Helpers.ToUtf8String(System.Collections.Generic.IEnumerable{System.Boolean})">
 <summary>
 Преобразует битовую последовательность в строку ASCII.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Helpers.BinaryEquals(System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Boolean})">
 <summary>
 Побитово сравнивает 2 массива.
 </summary>
</member>
<member name="M:LAB5.Viterbi.Helpers.GetMessageWithErrors(System.Collections.Generic.IEnumerable{System.Boolean},System.Int32)">
 <summary>
 Добавляет в битовый поток <paramref name="message"/> заданный процент случайных ошибок.
 </summary>
 <param name="message">Исходное сообщение.</param>
 <param name="errorsPercent">Процент ошибок, от 0 до 100.</param>
</member>
</members>
</doc>
